package com.dsa.linkedList;


public class DoublyLinkedList {

	class Node {
		int data;
		Node prev;
		Node next;

		public Node(int data) {
			this.data = data;
			this.prev = null;
			this.next = null;
		}
	}

	Node head = null;
	Node tail = null;
	
	
	public void insertBegin(int data) {
		Node newNode = new Node(data);
		
		if (head == null) {
			head = newNode;
			tail = newNode;
		}else {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
		}
	}
	
	
	public void insertEnd(int data) {
		Node newNode = new Node(data);
		
		if (tail == null) {
			head = tail = newNode;
		}else {
			tail.next = newNode;
			newNode.prev = tail;
			tail = newNode;
		}
	}
	
	public void insertPosition(int data, int p) {
		Node newNode = new Node(data);
		if (p <= 0) {
			System.out.println("Invalid Position!!");			
			return;
		}
		
		if(p == 1) {
			newNode.next = head;
			if (head != null) {
				head.prev = newNode;				
			}
			head = newNode;
			return;
		}
		
		Node temp = head;
		for(int i = 1; i < p - 1; i++) {
			if (temp == null) {
				System.out.println("Position Out of Bound -> position start : 1");
				return;
			}
			temp = temp.next;
		}
		
		if (temp == null) {
			System.out.println("Position Out of Bound -> position start : 1");
			return;
		}
		
		newNode.next = temp.next;
		newNode.prev = temp;
		
		if(temp.next != null)
			temp.next.prev = newNode;
		
		temp.next = newNode;
	}
	
	
	public void printList() {
	    Node temp = head;

//	    System.out.print("Forward: ");
	    Node last = null;
	    while (temp != null) {
	        System.out.print(temp.data + " ");
	        last = temp;
	        temp = temp.next;
	    }
	    System.out.println();

//	    System.out.print("Backward: ");
//	    while (last != null) {
//	        System.out.print(last.data + " ");
//	        last = last.prev;
//	    }
//	    System.out.println();
	}

	
	public static void main(String[] args) {
		DoublyLinkedList dl = new DoublyLinkedList();
		
		dl.insertBegin(10);
		dl.insertBegin(20);
		dl.insertBegin(30);
		dl.insertBegin(40);
		dl.insertBegin(50);
		
		dl.printList();
		
		dl.insertPosition(15, 6);
		dl.printList();
		
	}
	
}

package com.dsa.linkedList;

public class SinglyList {
	
	class Node{
		public int data;
		public Node next;
		
		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}
	
	
	Node head = null;
	
	public void insertBegin(int item) {
		Node newNode = new Node(item);
		if(head == null) {
			head = newNode;
			return;
		}
		
		newNode.next = head;
		head = newNode;
		
	}
	
	public void insertEnd(int item) {
		Node newNode = new Node(item);
		if(head == null) {
			head = newNode;
			return;
		}
		
		Node temp = head;
		while(temp.next != null) {
			temp = temp.next;			
		}
		
		temp.next = newNode;
	}
	
	public void insertPosition(int item, int p) {
		Node newNode = new Node(item);
		if(p <= 0) {
			System.out.println("Invalid Position!!");
			return;
		}
		if(p == 1) {
			newNode.next = head;
			head = newNode;
			return;
		}
		
		
		Node temp = head;
		for(int i = 1; i < p-1; i++) {
			if(temp == null) {
				System.out.println("Position Out of Bound");
				return;
			}
			temp = temp.next;
		}
		
		if(temp == null) {
			System.out.println("Position Out of Bound");
			return;
		}
		newNode.next = temp.next;
		temp.next = newNode;
	}
	
	public void deleteBegin() {
		if(head != null) {
			head = head.next;	
			return;
		}
	}
	
	public void deleteEnd() {
		Node temp = head;
		if(temp.next == null) {
			head = null;
			return;
		}
		while(temp.next.next != null) {
			temp = temp.next;	
			if (temp.next.next == null) {
				temp.next = null;	
				return;
			}
		}
		
		
	}
	
	public void deletePosition(int p) {
		if(p <= 0) {
			System.out.println("Invalid Position!! => It will be start 1");
			return;
		}
		Node temp = head;
		if(p == 1) {
			if(head == null) {
				System.out.println("List is Empty!!");
				return;
			}
			head = head.next;
			return;
		}
		
		if(temp == null) {
			System.out.println("Position invalid!!");
			return;
		}
		for(int i = 1; i < p - 1; i++) {
			temp = temp.next;
		}
		
		if(temp == null || temp.next == null) {
			System.out.println("Position out of Bound!!");
			return;
		}
		
		temp.next = temp.next.next;
	}
	
	
//	SEARCH OPERATION
	
//	public int search(int item) {
//		if(item <= 0) {
//			return 0;
//		}
//			
//		if(item == 1) {
//			return head.data;
//		}
//		
//		Node temp = head;
//		for(int i = 1; i < item; i++) {
//			if(temp == null || temp.next == null) {
//				return -1;
//			}
//			temp = temp.next;
//		}
//		
//		return temp.data;		
//		
//	}
	
	public void printList() {
		Node temp = head;
		while(temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
		System.out.println();		
	}
	
	public static void main(String[] args) {
		SinglyList sl = new SinglyList();
		sl.insertEnd(10);
		sl.insertEnd(20);
		sl.insertEnd(40);
		sl.insertEnd(50);
		
		sl.insertPosition(30, 3);
		
		sl.printList();
		
		
//		sl.deleteBegin();
//		sl.printList();
//		
//		sl.deleteEnd();
//		sl.printList();
//		
//		sl.deleteEnd();
//		sl.printList();
//		
//		sl.deleteBegin();
//		sl.printList();
//		
//		sl.deleteEnd();
//		sl.printList();
//		
//		sl.insertBegin(10);
//		sl.printList();
//		
//		sl.deleteBegin();
//		sl.printList();
//		System.out.println("hii");
//		
//		sl.insertEnd(20);
//		sl.deleteEnd();
//		sl.printList();
//		System.out.println("hello");
		
		sl.deletePosition(3);
		sl.printList();
		
//		SEARCH OPERATION 
		
//		int searchItem = sl.search(1);
//		if (searchItem < 0) {
//			System.out.println("Position Out of Bound!!");
//		}else if (searchItem == 0) {
//			System.out.println("Position invalid!! => Position Will start 1");
//		} else {
//			System.out.println(searchItem);
//		}
		
		
	}

}
